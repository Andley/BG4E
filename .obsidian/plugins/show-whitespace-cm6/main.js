/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var p=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var k=Object.prototype.hasOwnProperty;var W=(a,s)=>{for(var n in s)p(a,n,{get:s[n],enumerable:!0})},y=(a,s,n,e)=>{if(s&&typeof s=="object"||typeof s=="function")for(let l of b(s))!k.call(a,l)&&l!==n&&p(a,l,{get:()=>s[l],enumerable:!(e=f(s,l))||e.enumerable});return a};var E=a=>y(p({},"__esModule",{value:!0}),a);var x={};W(x,{default:()=>T});module.exports=E(x);var w=require("@codemirror/view"),d=require("obsidian");var h=require("obsidian");var u={manifestName:"Show Whitespace",block1:{name:"Show Whitespace"},saveSettings:{name:"Save settings",resetBtn:{tooltip:"Reset to previously saved (or generated) values"},saveBtn:{tooltip:"Save current values"}},suppressPluginStyles:{name:"Suppress plugin styles",desc:"Disable the plugin's default styles. You will need to provide your own CSS snippets to customize the appearance of whitespace."},showBlockquoteMarkers:{name:"Show blockquote markers",desc:"Always display the leading '>' for blockquotes in Live Preview mode."},highlightListMarkers:{name:"Highlight List Markers",desc:"Add a visual style to the space reserved by list markers (e.g., '-', '1.')."},block2:{name:"Whitespace",desc:"By default, this plugin will show leading and trailing whitespace including marks for line endings, hard breaks, and tabs."},showAllWhitespace:{name:"Show all whitespace",desc:"Display markers for all whitespace characters, including those between words."},showConsecutiveWhitespace:{name:"Show consecutive whitespace",desc:"Display markers only for multiple consecutive whitespace characters between words (included in 'Show All Whitespace')."},showLineEndings:{name:"Show line endings",desc:"Display markers for line endings (different from hard line breaks)."},block3:{name:"Content types",desc:"The following settings allow you to enable or disable the display of whitespace characters within the document. Unless otherwise noted, the appearance of whitespace follows the settings above."},showFrontmatterWhitespace:{name:"Show frontmatter whitespace",desc:"Display whitespace characters in YAML frontmatter (properties)."},showTableWhitespace:{name:"Show table whitespace",desc:"Display leading or trailing whitespace characters in tables."},showCodeBlockWhitespace:{name:"Show code block whitespace",desc:"Display leading/trailing whitespace characters in code blocks (included in 'Show All Code Block Whitespace')"},showAllCodeBlockWhitespace:{name:"Show all code block whitespace",desc:"Display all whitespace characters in code blocks, making them look more like a code editor. This will override the settings above."}};var m={en:u},S=a=>a in m?m[a]:m.en;var r=class extends h.PluginSettingTab{constructor(s,n){super(s,n),this.plugin=n}async save(){await this.plugin.updateSettings(this.newSettings)}async display(){await this.plugin.loadSettings(),this.reset()}async reset(){this.newSettings=JSON.parse(JSON.stringify(this.plugin.settings)),this.drawElements()}drawElements(){let s=this.plugin.manifest.id,n=window.localStorage.getItem("language"),e=S(n),l=e.manifestName||this.plugin.manifest.name;this.containerEl.empty(),this.containerEl.addClass(s),new h.Setting(this.containerEl).setHeading().setName(l),new h.Setting(this.containerEl).setName(e.saveSettings.name).setClass(`${s}-save-reset`).addButton(i=>i.setIcon("reset").setTooltip(e.saveSettings.resetBtn.tooltip).onClick(()=>{this.reset(),console.log("(SW-CM6) Configuration reset")})).addButton(i=>{i.setIcon("save").setTooltip(e.saveSettings.saveBtn.tooltip).onClick(async()=>{await this.save()}),this.saveButton=i.buttonEl}),new h.Setting(this.containerEl).setName(e.suppressPluginStyles.name).setDesc(e.suppressPluginStyles.desc).addToggle(i=>i.setValue(this.newSettings.disablePluginStyles).onChange(async t=>{let o=t!==this.newSettings.disablePluginStyles;this.newSettings.disablePluginStyles=t,o&&this.drawElements()})),new h.Setting(this.containerEl).setName(e.showBlockquoteMarkers.name).setDesc(e.showBlockquoteMarkers.desc).addToggle(i=>i.setValue(this.newSettings.showBlockquoteMarkers).onChange(async t=>{let o=t!==this.newSettings.showBlockquoteMarkers;this.newSettings.showBlockquoteMarkers=t,o&&this.drawElements()})),new h.Setting(this.containerEl).setName(e.highlightListMarkers.name).setDesc(e.highlightListMarkers.desc).addToggle(i=>i.setValue(this.newSettings.outlineListMarkers).onChange(async t=>{let o=t!==this.newSettings.outlineListMarkers;this.newSettings.outlineListMarkers=t,o&&this.drawElements()})),new h.Setting(this.containerEl).setHeading().setName(e.block2.name),this.containerEl.createEl("p",{text:e.block2.desc}),new h.Setting(this.containerEl).setName(e.showAllWhitespace.name).setDesc(e.showAllWhitespace.desc).addToggle(i=>i.setValue(this.newSettings.showAllWhitespace).onChange(async t=>{let o=t!==this.newSettings.showAllWhitespace;this.newSettings.showAllWhitespace=t,o&&this.drawElements()})),new h.Setting(this.containerEl).setName(e.showLineEndings.name).setDesc(e.showLineEndings.desc).addToggle(i=>i.setValue(this.newSettings.showLineEndings).onChange(async t=>{let o=t!==this.newSettings.showLineEndings;this.newSettings.showLineEndings=t,o&&this.drawElements()})),new h.Setting(this.containerEl).setHeading().setName(e.block3.name),this.containerEl.createEl("p",{text:e.block3.desc}),new h.Setting(this.containerEl).setName(e.showFrontmatterWhitespace.name).setDesc(e.showFrontmatterWhitespace.desc).addToggle(i=>i.setValue(this.newSettings.showFrontmatterWhitespace).onChange(async t=>{let o=t||this.newSettings.showAllWhitespace,c=o!==this.newSettings.showFrontmatterWhitespace;this.newSettings.showFrontmatterWhitespace=o,c&&this.drawElements()})),new h.Setting(this.containerEl).setName(e.showTableWhitespace.name).setDesc(e.showTableWhitespace.desc).addToggle(i=>i.setValue(this.newSettings.showTableWhitespace).onChange(async t=>{let o=t||this.newSettings.showAllWhitespace,c=o!==this.newSettings.showTableWhitespace;this.newSettings.showTableWhitespace=o,c&&this.drawElements()})),new h.Setting(this.containerEl).setName(e.showCodeBlockWhitespace.name).setDesc(e.showCodeBlockWhitespace.desc).addToggle(i=>i.setValue(this.newSettings.showCodeblockWhitespace).onChange(async t=>{let o=t||this.newSettings.showAllCodeblockWhitespace,c=o!==this.newSettings.showCodeblockWhitespace;this.newSettings.showCodeblockWhitespace=o,c&&this.drawElements()})),new h.Setting(this.containerEl).setName(e.showAllCodeBlockWhitespace.name).setDesc(e.showAllCodeBlockWhitespace.desc).addToggle(i=>i.setValue(this.newSettings.showAllCodeblockWhitespace).onChange(async t=>{let o=t!==this.newSettings.showAllCodeblockWhitespace;this.newSettings.showAllCodeblockWhitespace=t,o&&this.drawElements()}))}hide(){this.save()}};var C={version:{major:0,minor:0,patch:0},disablePluginStyles:!1,enabled:!0,outlineListMarkers:!1,showAllCodeblockWhitespace:!1,showAllWhitespace:!1,showBlockquoteMarkers:!1,showCodeblockWhitespace:!1,showExtraWhitespace:!1,showFrontmatterWhitespace:!0,showLineEndings:!0,showTableWhitespace:!0},g=class extends d.Plugin{constructor(){super(...arguments);this.cmExtension=[];this.classList=[];this.onExternalSettingsChange=(0,d.debounce)(async()=>{this.settings=Object.assign({},this.settings,await this.loadData()),this.updateSettings(this.settings),console.debug("(SW-CM6) external settings changed")},2e3,!0)}async onload(){console.info(`loading Show Whitespace (SW-CM6) v${this.manifest.version}`),await this.loadSettings(),this.addSettingTab(new r(this.app,this)),this.initClasses(),this.registerEditorExtension(this.cmExtension),this.handleExtension(!0);let n={id:"whitespace-toggle",name:"Toggle Show Whitespace",icon:"pilcrow",callback:async()=>this.toggleExtension(this)};this.addCommand(n)}handleExtension(n){console.log("(SW-CM6) enabled",this.settings.enabled),this.removeClasses(),this.initClasses(),this.cmExtension.length=0,this.settings.enabled&&(this.cmExtension.push((0,w.highlightWhitespace)()),this.cmExtension.push((0,w.highlightTrailingWhitespace)())),n||this.app.workspace.updateOptions()}initClasses(){this.classList=[this.manifest.id],(!this.settings.enabled||this.settings.disablePluginStyles)&&this.classList.push("swcm6-nix-plugin-styles"),this.settings.enabled&&(this.settings.showBlockquoteMarkers&&this.classList.push("swcm6-show-blockquote-markers"),this.settings.showCodeblockWhitespace&&this.classList.push("swcm6-show-codeblock-whitespace"),this.settings.showAllCodeblockWhitespace&&this.classList.push("swcm6-show-all-codeblock-whitespace"),this.settings.showExtraWhitespace&&this.classList.push("swcm6-show-extra-whitespace"),this.settings.showLineEndings&&this.classList.push("swcm6-show-line-endings"),this.settings.showFrontmatterWhitespace&&this.classList.push("swcm6-show-frontmatter-whitespace"),this.settings.showTableWhitespace&&this.classList.push("swcm6-show-table-whitespace"),this.settings.showAllWhitespace&&this.classList.push("swcm6-show-all-whitespace"),this.settings.outlineListMarkers&&this.classList.push("swcm6-outline-list-markers")),document.body.addClasses(this.classList)}removeClasses(){document.body.removeClasses(this.classList)}onunload(){console.log("(SW-CM6) unloading Show Whitespace"),this.removeClasses()}async handleConfigFileChange(){await super.handleConfigFileChange(),this.onExternalSettingsChange()}async toggleExtension(n){n.settings.enabled=!n.settings.enabled,n.updateSettings(this.settings)}async loadSettings(){if(!this.settings){let n=await this.loadData();this.settings=Object.assign({},C,n);let e=L(this.manifest.version);v(e,this.settings.version)!==0&&(this.settings.version=e,await this.saveSettings())}}async updateSettings(n){this.settings=Object.assign({},this.settings,n),await this.saveSettings(),this.handleExtension(!1),console.log("(SW-CM6) settings and classes updated")}async saveSettings(){await this.saveData(this.settings)}};function v(a,s){return a.major===s.major?a.minor===s.minor?a.patch-s.patch:a.minor-s.minor:a.major-s.major}function L(a){let s=a.split(".");return{major:Number(s[0]),minor:Number(s[1]),patch:Number(s[2])}}var T=g;

/* nosourcemap */