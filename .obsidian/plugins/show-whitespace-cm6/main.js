/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var g=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var p=(n,s)=>{for(var t in s)g(n,t,{get:s[t],enumerable:!0})},u=(n,s,t,i)=>{if(s&&typeof s=="object"||typeof s=="function")for(let e of w(s))!m.call(n,e)&&e!==t&&g(n,e,{get:()=>s[e],enumerable:!(i=d(s,e))||i.enumerable});return n};var S=n=>u(g({},"__esModule",{value:!0}),n);var y={};p(y,{default:()=>C});module.exports=S(y);var r=require("obsidian"),c=require("@codemirror/view");var a=require("obsidian"),h=class extends a.PluginSettingTab{constructor(s,t){super(s,t),this.plugin=t}async save(){await this.plugin.updateSettings(this.newSettings)}async display(){await this.plugin.loadSettings(),this.reset()}async reset(){this.newSettings=JSON.parse(JSON.stringify(this.plugin.settings)),this.drawElements()}drawElements(){let s=this.plugin.manifest.id,t=this.plugin.manifest.name;this.containerEl.empty(),this.containerEl.addClass(s),new a.Setting(this.containerEl).setHeading().setName(t),new a.Setting(this.containerEl).setName("Save settings").setClass(s+"-save-reset").addButton(i=>i.setIcon("reset").setTooltip("Reset to previously saved (or generated) values").onClick(()=>{this.reset(),console.log("(SW-CM6) Configuration reset")})).addButton(i=>{i.setIcon("save").setTooltip("Save current values").onClick(async()=>{await this.save()}),this.saveButton=i.buttonEl}),new a.Setting(this.containerEl).setName("Suppress plugin styles").setDesc("Enable to remove plugin styles. You will need to define your own snippet to customize the appearance of whitespace").addToggle(i=>i.setValue(this.newSettings.disablePluginStyles).onChange(async e=>{let o=e!=this.newSettings.disablePluginStyles;this.newSettings.disablePluginStyles=e,o&&this.drawElements()})),new a.Setting(this.containerEl).setName("Always show blockquote markers").setDesc("Show the leading > for blockquotes in Live Preview").addToggle(i=>i.setValue(this.newSettings.showBlockquoteMarkers).onChange(async e=>{let o=e!=this.newSettings.showBlockquoteMarkers;this.newSettings.showBlockquoteMarkers=e,o&&this.drawElements()})),new a.Setting(this.containerEl).setName("Show all whitespace characters in code blocks").setDesc("Add a marker for all whitespace characters in code blocks (included in Show all whitespace)").addToggle(i=>i.setValue(this.newSettings.showCodeblockWhitespace).onChange(async e=>{e=e||this.newSettings.showAllWhitespace;let o=e!=this.newSettings.showCodeblockWhitespace;this.newSettings.showCodeblockWhitespace=e,o&&this.drawElements()})),new a.Setting(this.containerEl).setName("Show all whitespace characters").setDesc("Add a marker for all whitespace characters, even those between words").addToggle(i=>i.setValue(this.newSettings.showAllWhitespace).onChange(async e=>{let o=e!=this.newSettings.showAllWhitespace;this.newSettings.showAllWhitespace=e,o&&this.drawElements()})),new a.Setting(this.containerEl).setName("Outline list markers").setDesc("Add a style to space reserved by list markers (e.g. ' -' or ' 1.')").addToggle(i=>i.setValue(this.newSettings.outlineListMarkers).onChange(async e=>{let o=e!=this.newSettings.outlineListMarkers;this.newSettings.outlineListMarkers=e,o&&this.drawElements()}))}hide(){this.save()}};var f={version:{major:0,minor:0,patch:0},disablePluginStyles:!1,showBlockquoteMarkers:!1,showCodeblockWhitespace:!1,showAllWhitespace:!1,outlineListMarkers:!1,enabled:!0},l=class extends r.Plugin{constructor(){super(...arguments);this.cmExtension=[];this.classList=[];this.onExternalSettingsChange=(0,r.debounce)(async()=>{this.settings=Object.assign({},this.settings,await this.loadData()),this.updateSettings(this.settings),console.debug("(SW-CM6) external settings changed")},2e3,!0)}async onload(){console.info("loading Show Whitespace (SW-CM6) v"+this.manifest.version),await this.loadSettings(),this.addSettingTab(new h(this.app,this)),document.body.classList.add(this.manifest.id),this.initClasses(),this.registerEditorExtension(this.cmExtension),this.handleExtension(!0);let t={id:"whitespace-toggle",name:"Toggle Show Whitespace",icon:"pilcrow",callback:async()=>this.toggleExtension(this)};this.addCommand(t)}handleExtension(t){console.log("(SW-CM6) enabled",this.settings.enabled),this.removeClasses(),this.initClasses(),this.cmExtension.length=0,this.settings.enabled&&(this.cmExtension.push((0,c.highlightWhitespace)()),this.cmExtension.push((0,c.highlightTrailingWhitespace)())),t||this.app.workspace.updateOptions()}initClasses(){this.classList=[],(!this.settings.enabled||this.settings.disablePluginStyles)&&this.classList.push("swcm6-nix-plugin-styles"),this.settings.enabled&&(this.settings.showBlockquoteMarkers&&this.classList.push("swcm6-show-blockquote-markers"),this.settings.showCodeblockWhitespace&&this.classList.push("swcm6-show-codeblock-whitespace"),this.settings.showAllWhitespace&&this.classList.push("swcm6-show-all-whitespace"),this.settings.outlineListMarkers&&this.classList.push("swcm6-outline-list-markers")),document.body.addClasses(this.classList)}removeClasses(){document.body.removeClasses(this.classList)}onunload(){console.log("(SW-CM6) unloading Show Whitespace"),document.body.classList.add(this.manifest.id),this.removeClasses()}async handleConfigFileChange(){await super.handleConfigFileChange(),this.onExternalSettingsChange()}async toggleExtension(t){t.settings.enabled=!t.settings.enabled,t.updateSettings(this.settings)}async loadSettings(){if(!this.settings){let t=await this.loadData();this.settings=Object.assign({},f,t);let i=k(this.manifest.version);b(i,this.settings.version)!=0&&(this.settings.version=i,await this.saveSettings())}}async updateSettings(t){this.settings=Object.assign({},this.settings,t),await this.saveSettings(),this.handleExtension(!1),console.log("(SW-CM6) settings and classes updated")}async saveSettings(){await this.saveData(this.settings)}};function b(n,s){return n.major===s.major?n.minor===s.minor?n.patch-s.patch:n.minor-s.minor:n.major-s.major}function k(n){let s=n.split(".");return{major:Number(s[0]),minor:Number(s[1]),patch:Number(s[2])}}var C=l;
